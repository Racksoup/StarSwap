{"version":3,"sources":["images/unnamed.png","images/starswap.png","Components/header.js","Components/woody.js","Components/abilityTemplate.js","Components/abilitys.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","src","Sheild","alt","Woody","Starswap","AbilityTemplate","name","powers","map","item","divine","shadow","primordial","cosmic","manipulation","Abilitys","Components_abilityTemplate","App","Components_header","Components_woody","Components_abilitys","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qRCezBC,SAXA,SAAAC,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,0CACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,mLAEDH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAQC,IAAI,SAASH,UAAU,gBACxCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,sCCIYI,SAXD,SAAAR,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKI,IAAUL,UAAU,WAAWG,IAAI,cAE9CN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,mdCKaM,SAXS,SAAAV,GAAK,OAC5BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMW,OAEnCV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZJ,EAAMY,OAAOC,IAAI,SAACC,GAAD,OAAUb,EAAAC,EAAAC,cAAA,UAAKW,SCL9BC,SAAS,CAAC,+OAA2O,6IAA8I,0HAA2H,0HAA2H,uHAAwH,wOAAyO,gOAAiO,gMAC3rCC,EAAS,CAAC,gBAAiB,8GAA+G,uQAAwQ,4FAA6F,mFAAoF,8GAA+G,yFAClrBC,EAAa,CAAC,6FAA8F,+EAAgF,8EAA+E,0DAA2D,gDACtUC,EAAS,CAAC,WAAY,gBAAiB,eAAgB,8BAA+B,sBAAuB,+CAAgD,gBAAiB,UAAY,wGAA0G,2KACpSC,EAAe,CAAC,0KAA2K,wGAalLC,EAXE,SAAApB,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,4BACAH,EAAAC,EAAAC,cAACkB,EAAD,CAAiBV,KAAK,SAASC,OAAQG,IACvCd,EAAAC,EAAAC,cAACkB,EAAD,CAAiBV,KAAK,SAASC,OAAQI,IACvCf,EAAAC,EAAAC,cAACkB,EAAD,CAAiBV,KAAK,aAAaC,OAAQK,IAC3ChB,EAAAC,EAAAC,cAACkB,EAAD,CAAiBV,KAAK,SAASC,OAAQM,IACvCjB,EAAAC,EAAAC,cAACkB,EAAD,CAAiBV,KAAK,eAAeC,OAAQO,MCAhCG,mLAVX,OACErB,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,cANcC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.8300fe0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unnamed.6c407022.png\";","module.exports = __webpack_public_path__ + \"static/media/starswap.4f41b80d.png\";","import React from 'react';\r\nimport Sheild from '../images/unnamed.png';\r\nimport './cssFolder/header.css';\r\n\r\nconst Header = props => (\r\n\t<div className='headerStyle'>\r\n\t\t<div className='headerText'>\r\n\t\t\t<div className='title'> StarSwap: Protector of the PentaStar </div>\r\n\t\t\t<p className='description'> The PentaStar is the force that created the Universe 14 billion years ago. The PentaStar is made up of 5 unique magics. Divine, Shadow, Primordial, Cosmic and, Manipulation </p>\r\n\t\t</div>\r\n\t\t<img src={Sheild} alt='sheild' className='sheildStyle'/>\r\n\t\t\t<div className='sheildInfo'>StarSwap Sheild</div>\r\n\t</div>\r\n);\r\n\r\nexport default Header;\r\n\r\n","import React from 'react';\r\nimport Starswap from '../images/starswap.png';\r\nimport './cssFolder/woody.css';\r\n\r\nconst Woody = props => (\r\n\t<div className='containerStyle'>\r\n\t\t<div className='imgContainer'>\r\n\t\t\t<img src={Starswap} className='imgStyle' alt='Starswap'/>\r\n\t\t</div>\r\n\t\t<div className='textContainer'>\r\n\t\t\tWoody Woodward - Master of the 5 magics, Protector of the PentaStar. Woody was born and raised in a suburb of the capital of Canada, Ottawa Orleans. Woody meets the love of his life at 18 when he goes overseas to work for a non-government organization. after loosing the love of his life to pirates Woody decides to take his own life. However, the magic of the PentaStar intervines. Woody now fights against any enemys that threaten to annihilate the universe.\r\n\t\t</div>\r\n\t</div>\r\n);\r\n\r\nexport default Woody;","import React from 'react';\r\nimport './cssFolder/abilityTemplate.css';\r\n\r\nconst AbilityTemplate = props => (\r\n\t<div className='templateStyle'>\r\n\t\t<div className='nameBox'>\r\n\t\t\t<div className='nameStyle'>{props.name}</div>\r\n\t\t</div>\r\n\t\t<ul className='powersBox'>\r\n\t\t\t{props.powers.map((item) => <li>{item}</li> )}\r\n\t\t</ul>\r\n\t</div>\r\n);\r\n\r\nexport default AbilityTemplate;","import React from 'react';\r\nimport AbilityTemplate from './abilityTemplate';\r\nimport './cssFolder/abilitys.css';\r\n\r\nconst divine = [\"Resurrection (within the hour of one's demise) or precast on a living body. If body dies, is automatically rezed on the spot. If body doesnâ€™t die, spell wears off after half a minute and does nothing. Extremely draining to preform.\", \"Bubble: An unbreakable bubble of light which surrounds an individual, making them immune to all forms of damage and death for ten seconds.\", \"Defense Barrier: An energy barrier which thickens the skin of the user granting increased defense until broken through.\", \"Ring of health: A ring which appears on the ground. Any friendly target who enters will be slowly healed of all wounds.\", \"Revitalization: A surge of divine energy which quickly heals a specific target of one major injury they suffer from.\", \"Ball of light: A small ball of healing light which follows over a target or travel across a straight line, constantly healing them or any allies in its path of potential wounds every two seconds.(Light dies off after ten seconds)\", \"Divine mist: A channeled beam of misting yellow energy which rapidly heals a specific target of all wounds. The mist also bounces off and heals the next three most damaged targets for half the amount as the direct target.\", \"Divine discharge: A pulsing discharge of direct divine magic which damages any who stand in its path. Any friendly targets nearby shall be healed if an enemy is damaged by this discharge.\"];\r\nconst shadow = [\"Intangibility\", \"Conjuration (Anything that has been conjured, can be also be un-conjured or re-conjured to something else.)\", \"Mind Control: Can cause headaches, seizures, anxiety and implant images/voices in others heads. Can temporarily stun enemies in place with a psychic shockwave. Cannot read minds but can sense others feelings as well as link up a telepathic communications link.\", \"Demonic Summoning: Can summon an array of demonic forces to fight and protect at my side.\", \"Ability to communicate and see the presence of all ghosts and paranormal beings.\", \"Reamination: Ability to temporarily reaminate skeletons and recently deceased beings into soulless minions.\", \"Decay: An ability which slowly decays the targets skin for a total of twenty seconds.\"];\r\nconst primordial = [\"Hydrokinesis: The ability to create and control water and ice. Body incapable of freezing.\", \"Plantokinesis: The ability to create and control all plant/wood/fungal life.\", \"Pyrokinesis: Ability to create and control fire. Body incapable of burning.\", \"Zapokinesis: Ability to create and control electricity.\", \"Natural immunity to most poisons and toxins.\"];\r\nconst cosmic = [\"Blinking\", \"Teleportation\", \"X-ray vision\", \"Survive and Breath in Space\", \"Small Storage Voids\", \"Automatic voice translation(natural ability)\", \"Time Reversal\", \"Portals\" , \"Stellar Power: Includes, Cosmic light beams, stellar showers, solar flares and holographic illusions.\" , \"Moon Power: Includes, Lunar energy blasts, Invisibility, and the ability to control and change gravity and the weights and physical sizes of objects and living beings.\"];\r\nconst manipulation = [\"Object Warping:Taps into the nature of the air and allows for one to move, control, manipulate and reshape all known metals, rocks, crystals and glass in the universe.\", \"Wind Warping: Taps into the nature of the air and can cause high speed winds and tornados to appear.\"];\r\n\r\nconst Abilitys = props => (\r\n\t<div className='abilitysStyle'>\r\n\t\t<p className='title'>PentaStar Magical Powers</p>\r\n\t\t<AbilityTemplate name=\"Divine\" powers={divine}/>\r\n\t\t<AbilityTemplate name=\"Shadow\" powers={shadow}/>\r\n\t\t<AbilityTemplate name=\"Primordial\" powers={primordial}/>\r\n\t\t<AbilityTemplate name=\"Cosmic\" powers={cosmic}/>\r\n\t\t<AbilityTemplate name=\"Manipulation\" powers={manipulation}/>\r\n\t</div>\r\n);\r\n\r\nexport default Abilitys;","import React, { Component } from 'react';\nimport Header from './Components/header';\nimport Woody from './Components/woody';\nimport Abilitys from './Components/abilitys';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n\t\t\t\t<Header />\n\t\t\t\t<Woody />\n\t\t\t\t<Abilitys />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}